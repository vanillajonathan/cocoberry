{"version":3,"sources":["components/TagList.tsx","components/AddExperienceDialog.tsx","components/EditExperienceDialog.tsx","components/ExperienceList.tsx","components/OptionsSheet.tsx","components/MaybeAgainCard.tsx","components/NeverCard.tsx","components/PwaInstaller.tsx","components/ShortcutsDialog.tsx","components/Toast.tsx","views/Home.tsx","views/Preferences.tsx","App.tsx","serviceWorker.ts","index.tsx","localStorage.tsx"],"names":["TagList","props","handleClick","event","activeTag","currentTarget","innerText","toLowerCase","onClick","className","tags","map","tag","key","AddExperienceDialog","useState","name","setName","setTag","nameInput","React","handleClose","onClose","useEffect","current","focus","backdropClassName","isOpen","tabIndex","role","type","data-dismiss","aria-label","aria-hidden","onSubmit","preventDefault","onAdd","htmlFor","id","value","onChange","target","ref","autoFocus","required","defaultProps","EditExperienceDialog","experience","last","setLast","onSave","parseInt","ExperienceList","compare","a","b","weekAgo","experiences","filter","x","moment","subtract","valueOf","sort","monthAgo","yearAgo","reverse","weekGroup","ExperienceListGroup","onEdit","monthGroup","yearGroup","length","Date","toLocaleDateString","dateTime","toISOString","title","toString","fromNow","BottomSheet","open","style","zIndex","children","MaybeAgainCard","timeAgo","NeverCard","PwaInstaller","deferredPrompt","showInstallPrompt","setShowInstallPrompt","beforeInstallPrompt","window","addEventListener","removeEventListener","prompt","userChoice","then","choiceResult","outcome","console","log","ShortcutsDialog","Toast","show","aria-live","aria-atomic","message","Home","activeId","setActiveId","activeExperience","setActiveExperience","setExperiences","maybeAgainCardExperience","setMaybeAgainCardExperience","neverCardExperience","setNeverCardExperience","setReverse","search","setSearch","showAddDialog","setShowDialog","showEditDialog","setShowEditDialog","showShortcutsDialog","setShowShortcutsDialog","showOptions","setShowOptions","showTags","setShowTags","showToast","setShowToast","toastMessage","setToastMessage","prefShowMaybeAgainCard","localStorage","getItem","prefShowNeverCard","showMaybeAgainCard","showNeverCard","myExperiences","timerId","handleAddExperienceButtonClick","handleEditOpenClick","randomExperience","Math","floor","random","maybeExp","undefined","exp","includes","accessKey","placeholder","parentElement","classList","toggle","prevState","onNavigation","find","uuid","i","getTime","clearTimeout","setTimeout","Preferences","fileInput","preferences","setPreferences","handlePreferenceChanged","checked","setItem","accept","reader","FileReader","onloadend","result","JSON","parse","storage","add_many","e","alert","file","files","readAsText","hidden","document","getElementById","click","json","stringify","get","File","url","URL","createObjectURL","location","assign","href","rel","App","seed","nav","setNav","handleNavigation","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","add","this","item","push","data","delete","Error","update","ReactDOM","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b4511077.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    activeTag: string;\r\n    tags: string[];\r\n    onClick(tag: string): void;\r\n}\r\n\r\nexport const TagList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    function handleClick(event: React.MouseEvent<HTMLElement>): void {\r\n        let activeTag = event.currentTarget.innerText.toLowerCase();\r\n        if (activeTag === props.activeTag) {\r\n            activeTag = \"\";\r\n        }\r\n        props.onClick(activeTag);\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list-inline\">\r\n            {props.tags.map(tag => {\r\n                let className = \"badge \";\r\n                className += (tag.toLowerCase() === props.activeTag ? \"bg-primary\" : \"bg-light text-dark\");\r\n                return <li className=\"list-inline-item\" key={tag}><span className={className} onClick={handleClick}>{tag}</span></li>;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { TagList } from \"./TagList\";\r\n\r\ninterface IProps {\r\n    name: string;\r\n    isOpen: boolean;\r\n    tags: string[];\r\n    onAdd(name: string, tag: string): void;\r\n    onClose(): void;\r\n}\r\n\r\nexport const AddExperienceDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [name, setName] = useState(props.name);\r\n    const [tag, setTag] = useState(\"\");\r\n    const nameInput = React.createRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        if (nameInput.current) {\r\n            nameInput.current.focus();\r\n        }\r\n    });\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    function handleClose(): void {\r\n        props.onClose();\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>): void {\r\n        event.preventDefault();\r\n        props.onAdd(name, tag);\r\n    }\r\n\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Add experience</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={handleClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"name\">Title</label>\r\n                                    <input className=\"form-control\" id=\"name\" type=\"text\" value={name} onChange={handleChange} ref={nameInput} autoFocus required />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label>Tag</label>\r\n                                    <TagList\r\n                                        activeTag={tag}\r\n                                        tags={props.tags}\r\n                                        onClick={tag => setTag(tag)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={handleClose}>Close</button>\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Add</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nAddExperienceDialog.defaultProps = {\r\n    name: \"\",\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { TagList } from \"./TagList\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    isOpen: boolean;\r\n    tags: string[];\r\n    onClose(): void;\r\n    onSave(experience: IExperience): void;\r\n}\r\n\r\nexport const EditExperienceDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [name, setName] = useState(props.experience.name);\r\n    const [tag, setTag] = useState(props.experience.tag || \"\");\r\n    const [last, setLast] = useState(props.experience.last || 0);\r\n    const nameInput = React.createRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        if (nameInput.current) {\r\n            nameInput.current.focus();\r\n        }\r\n    });\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    function handleTimeChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        setLast(parseInt(event.target.value, 10));\r\n    }\r\n\r\n    function handleClose(): void {\r\n        props.onClose();\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>): void {\r\n        event.preventDefault();\r\n        const experience: IExperience = { id: \"\", name: name, tag: tag, last: last };\r\n        props.onSave(experience);\r\n    }\r\n\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Edit experience</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={handleClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"name\">Title</label>\r\n                                    <input className=\"form-control\" id=\"name\" type=\"text\" value={name} onChange={handleChange} ref={nameInput} autoFocus required />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label>Tag</label>\r\n                                    <TagList activeTag={tag} tags={props.tags} onClick={tag => setTag(tag)} />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"time\">Last</label>\r\n                                    <input className=\"form-control\" id=\"time\" type=\"datetime-local\" value={last} onChange={handleTimeChange} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={handleClose}>Close</button>\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experiences: IExperience[];\r\n    reverse?: boolean;\r\n    onClick(id: string): void;\r\n    onEdit(id: string): void;\r\n}\r\n\r\nexport const ExperienceList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    function compare(a: IExperience, b: IExperience): number {\r\n        if (a.last == null || b.last == null) {\r\n            return 0;\r\n        }\r\n        if (a.last < b.last) {\r\n            return -1;\r\n        }\r\n        if (a.last > b.last) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const weekAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"w\").valueOf() &&\r\n            x.last > moment().subtract(2, \"w\").valueOf()).sort(compare);\r\n\r\n    const monthAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"m\").valueOf() &&\r\n            x.last > moment().subtract(2, \"m\").valueOf()).sort(compare);\r\n\r\n    const yearAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"y\").valueOf() &&\r\n            x.last > moment().subtract(2, \"y\").valueOf()).sort(compare);\r\n\r\n    let experiences = props.experiences.sort(compare);\r\n    if (props.reverse) {\r\n        experiences = experiences.reverse();\r\n    }\r\n\r\n    const weekGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A week ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={weekAgo} />\r\n        </React.Fragment>);\r\n\r\n    const monthGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A month ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={monthAgo} />\r\n        </React.Fragment>);\r\n\r\n    const yearGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A year ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={yearAgo} />\r\n        </React.Fragment>);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={experiences} />\r\n            {weekAgo.length > 0 && weekGroup}\r\n            {monthAgo.length > 0 && monthGroup}\r\n            {yearAgo.length > 0 && yearGroup}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface IExperienceListGroupProps {\r\n    experiences: IExperience[];\r\n    onClick(id: string): void;\r\n    onEdit(id: string): void;\r\n}\r\n\r\nconst ExperienceListGroup: React.FunctionComponent<IExperienceListGroupProps> = (props: IExperienceListGroupProps) => {\r\n    function last(experience: any): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <div><small className=\"float-right text-muted\">{new Date(experience.last).toLocaleDateString(\"sv-se\")}</small></div>\r\n                <time className=\"d-block text-muted small\" dateTime={new Date(experience.last).toISOString()} title={experience.last.toString()}>{moment(experience.last).fromNow()}</time>\r\n            </React.Fragment>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"list-group mb-3\">\r\n            {props.experiences.map(experience =>\r\n                <a className=\"list-group-item list-group-item-action\" key={experience.id} onClick={() => props.onClick(experience.id)}>\r\n                    {experience.name}\r\n                    {experience.last != null && last(experience)}\r\n                </a>\r\n            )}\r\n        </div>);\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IBottomSheetProps {\r\n    children: JSX.Element;\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nexport const BottomSheet: React.FunctionComponent<IBottomSheetProps> = (props: IBottomSheetProps) => {\r\n    let className = \"fixed-bottom fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.open) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    if (props.open) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className={className} tabIndex={-1} role=\"dialog\" style={{ zIndex: 2000 }}>\r\n                    {props.children}\r\n                </div>\r\n                <div className={backdropClassName} onClick={props.onClose}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\ninterface IOptionSheetProps {\r\n    id: string;\r\n    open: boolean;\r\n    onClose(): void;\r\n    onDone(id: string): void;\r\n    onEdit(id: string): void;\r\n    onDelete(id: string): void;\r\n}\r\n\r\nexport const OptionsSheet: React.FunctionComponent<IOptionSheetProps> = (props: IOptionSheetProps) => {\r\n    return (\r\n        <BottomSheet open={props.open} onClose={props.onClose}>\r\n            <div className=\"list-group list-group-flush\">\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onDone(props.id)}>Mark as done</a>\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onEdit(props.id)}>Edit</a>\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onDelete(props.id)}>Delete</a>\r\n            </div>\r\n        </BottomSheet>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    onClick(id: string): void;\r\n}\r\n\r\nexport const MaybeAgainCard: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const timeAgo = moment(props.experience.last || 0).fromNow();\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                <small className=\"text-muted text-uppercase\">It was {timeAgo}, Maybe again…</small>\r\n                <div>{props.experience.name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    onClick(id: string): void;\r\n}\r\n\r\nexport const NeverCard: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                <small className=\"text-muted text-uppercase\">You have never…</small>\r\n                <div>{props.experience.name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const PwaInstaller: React.FunctionComponent = () => {\r\n    let deferredPrompt: any;\r\n    const [showInstallPrompt, setShowInstallPrompt] = useState(false);\r\n\r\n    function handleInstall(): void {\r\n        setShowInstallPrompt(false);\r\n        deferredPrompt.prompt();\r\n        deferredPrompt.userChoice.then((choiceResult: any) => {\r\n            if (choiceResult.outcome === \"accepted\") {\r\n                console.log(\"User accepted the A2HS prompt\");\r\n            } else {\r\n                console.log(\"User dismissed the A2HS prompt\");\r\n            }\r\n            deferredPrompt = null;\r\n        });\r\n    }\r\n\r\n    function beforeInstallPrompt(event: Event): void {\r\n        deferredPrompt = event;\r\n        setShowInstallPrompt(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"beforeinstallprompt\", beforeInstallPrompt);\r\n        return () => {\r\n            window.removeEventListener(\"beforeinstallprompt\", beforeInstallPrompt);\r\n        };\r\n    });\r\n\r\n    if (showInstallPrompt) {\r\n        return (\r\n            <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-block\" onClick={handleInstall} title=\"Install web application\">Install</button>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nexport const ShortcutsDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Keyboard Shortcuts</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={props.onClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>N</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Add new experience</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Search</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>P</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Preferences</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>R</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Reverse sort</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={props.onClose}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    message: string;\r\n    show: boolean;\r\n}\r\n\r\nexport const Toast: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    let className = \"toast fixed-bottom bg-dark text-white mx-auto mb-3 fade\";\r\n    if (props.show) {\r\n        className += \" show\";\r\n    }\r\n    return (\r\n        <div className={className} role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n            <div className=\"toast-body\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { AddExperienceDialog } from \"../components/AddExperienceDialog\";\r\nimport { EditExperienceDialog } from \"../components/EditExperienceDialog\";\r\nimport { IExperience } from \"../IExperience\";\r\nimport { ExperienceList } from \"../components/ExperienceList\";\r\nimport { BottomSheet } from \"../components/OptionsSheet\";\r\nimport { MaybeAgainCard } from \"../components/MaybeAgainCard\";\r\nimport { NeverCard } from \"../components/NeverCard\";\r\nimport { PwaInstaller } from \"../components/PwaInstaller\";\r\nimport { ShortcutsDialog } from \"../components/ShortcutsDialog\";\r\nimport { TagList } from \"../components/TagList\";\r\nimport { Toast } from \"../components/Toast\";\r\nimport \"./Home.css\";\r\n\r\ninterface IProps {\r\n    experiences: IExperience[];\r\n    tags: string[];\r\n    onNavigation(component: string): void;\r\n}\r\n\r\nexport const Home: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [activeId, setActiveId] = useState(\"\");\r\n    const [activeExperience, setActiveExperience] = useState<IExperience>();\r\n    //const [experiences, setExperiences] = useState(props.storage.get());\r\n    const [experiences, setExperiences] = useState(props.experiences);\r\n    const [maybeAgainCardExperience, setMaybeAgainCardExperience] = useState<IExperience | null>(null);\r\n    const [neverCardExperience, setNeverCardExperience] = useState<IExperience | null>(null);\r\n    const [reverse, setReverse] = useState(false);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [showAddDialog, setShowDialog] = useState(false);\r\n    const [showEditDialog, setShowEditDialog] = useState(false);\r\n    const [showShortcutsDialog, setShowShortcutsDialog] = useState(false);\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showTags, setShowTags] = useState(false);\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [tag, setTag] = useState(\"\");\r\n    const [toastMessage, setToastMessage] = useState(\"\");\r\n\r\n    const prefShowMaybeAgainCard = localStorage.getItem(\"showMaybeAgainCard\") || \"false\";\r\n    const prefShowNeverCard = localStorage.getItem(\"showNeverCard\") || \"true\";\r\n\r\n    const [showMaybeAgainCard] = useState(prefShowMaybeAgainCard === \"true\");\r\n    const [showNeverCard] = useState(prefShowNeverCard === \"true\");\r\n\r\n    let timerId: number = 0;\r\n\r\n    useEffect(() => {\r\n        if (props.experiences.length !== 0) {\r\n            const maybeExp = randomExperience(props.experiences.filter(x => x.last !== null && x.last !== undefined));\r\n            setMaybeAgainCardExperience(maybeExp);\r\n            const exp = randomExperience(props.experiences.filter(x => x.last === null));\r\n            setNeverCardExperience(exp);\r\n        }\r\n    }, []);\r\n\r\n    function handleAddExperience(name: string, tag: string): void {\r\n        setShowDialog(false);\r\n        const experience: IExperience = {\r\n            id: uuid(),\r\n            name,\r\n            tag,\r\n        };\r\n        setExperiences((prevState: IExperience[]) => [...prevState, experience]);\r\n    }\r\n\r\n    function handleAddExperienceButtonClick(): void {\r\n        setShowDialog(true);\r\n    }\r\n\r\n    function handleClick(key: string): void {\r\n        setShowOptions(false);\r\n        setExperiences((prevState: IExperience[]) => prevState.map(i => i.id === key ? { ...i, last: new Date().getTime() } : i));\r\n        setToastMessage(\"Marked as done\");\r\n        setShowToast(true);\r\n        window.clearTimeout(timerId);\r\n        timerId = window.setTimeout(() => {\r\n            setShowToast(false);\r\n        }, 1500);\r\n    }\r\n\r\n    function handleDelete(key: string): void {\r\n        setShowOptions(false);\r\n        setToastMessage(\"Removed\");\r\n        setShowToast(true);\r\n        window.clearTimeout(timerId);\r\n        timerId = window.setTimeout(() => {\r\n            setShowToast(false);\r\n        }, 1500);\r\n    }\r\n\r\n    function handleOpenOptions(id: string): void {\r\n        setActiveId(id);\r\n        const exp = experiences.find(x => x.id === id);\r\n        setActiveExperience(exp);\r\n        setShowOptions(true);\r\n    }\r\n\r\n    function handleCloseOptions(): void {\r\n        setShowOptions(false);\r\n    }\r\n\r\n    function handleEditOpenClick(tag: string): void {\r\n        setShowOptions(false);\r\n        setShowEditDialog(true);  \r\n    }\r\n\r\n    function handleEditSaveClick(experience: IExperience): void {\r\n        setShowEditDialog(false);\r\n    }\r\n\r\n    function handleChange(event: React.FormEvent<HTMLInputElement>): void {\r\n        setSearch(event.currentTarget.value);\r\n    }\r\n\r\n    function handleDropdownClick(event: any): void {\r\n        event.target.parentElement.classList.toggle(\"dropup\");\r\n        setShowTags((prevState: boolean) => !prevState);\r\n    }\r\n\r\n    function handleSort(): void {\r\n        setReverse((prevState: boolean) => !prevState);\r\n    }\r\n\r\n    function handleTagClick(tag: string): void {\r\n        setTag(tag);\r\n    }\r\n\r\n    function handleClose(): void {\r\n        setShowDialog(false);\r\n        setShowEditDialog(false);\r\n    }\r\n\r\n    function randomExperience(experiences: IExperience[]): IExperience {\r\n        return experiences[Math.floor(Math.random() * experiences.length)];\r\n    }\r\n\r\n    let myExperiences: IExperience[];\r\n    if (search !== \"\" || tag !== \"\") {\r\n        myExperiences = experiences.filter(x => x.name.toLowerCase().includes(search.toLowerCase()));\r\n        if (tag !== \"\") {\r\n            myExperiences = myExperiences.filter(x => x.tag != null && x.tag.includes(tag));\r\n        }\r\n    } else {\r\n        myExperiences = experiences.filter(x => x.last != null);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"bg-white fixed-top shadow-sm\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"d-flex flex-grow-1\">\r\n                            <span className=\"navbar-brand d-none d-xl-block\">Cocoberry</span>\r\n                            <div className=\"mr-auto\">\r\n                                <div className=\"input-group\">\r\n                                    <input className=\"form-control\" type=\"search\" accessKey=\"s\" placeholder=\"Search…\" title=\"Search\" onChange={handleChange} aria-label=\"Search\" />\r\n                                    <div className=\"input-group-append mr-sm-2\">\r\n                                        <button className=\"btn btn-outline-success dropdown-toggle\" type=\"button\" onClick={handleDropdownClick} aria-label=\"Show tags\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"\">\r\n                                {PwaInstaller}\r\n                                <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-inline\" accessKey=\"?\" onClick={() => setShowShortcutsDialog(true)} title=\"Shortcuts\">K</button>\r\n                                <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-inline\" accessKey=\"r\" onClick={handleSort} title=\"Sort\">▲</button>\r\n                                <button className=\"btn btn-outline-success mr-sm-2\" accessKey=\"n\" onClick={handleAddExperienceButtonClick} title=\"Add new experience\">+</button>\r\n                                <button className=\"btn btn-outline-success\" accessKey=\"p\" onClick={() => props.onNavigation(\"Preferences\")}>☰</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                {showTags &&\r\n                    <div className=\"container\">\r\n                        <TagList activeTag={tag} tags={props.tags} onClick={handleTagClick} />\r\n                    </div>\r\n                }\r\n            </header>\r\n            <main className=\"App container\">\r\n                {showMaybeAgainCard && search === \"\" && tag === \"\" && maybeAgainCardExperience &&\r\n                    <MaybeAgainCard experience={maybeAgainCardExperience} onClick={handleEditOpenClick} />\r\n                }\r\n                {showNeverCard && search === \"\" && tag === \"\" && neverCardExperience &&\r\n                    <NeverCard experience={neverCardExperience} onClick={handleEditOpenClick} />\r\n                }\r\n                <ExperienceList experiences={myExperiences} reverse={reverse} onClick={handleOpenOptions} onEdit={handleEditOpenClick} />\r\n                {search !== \"\" && myExperiences.length === 0 &&\r\n                    <React.Fragment>\r\n                        <p>There are no matched experiences.</p>\r\n                        <button className=\"btn btn-outline-secondary\" onClick={handleAddExperienceButtonClick}>Add new experience</button>\r\n                    </React.Fragment>\r\n                }\r\n            </main>\r\n            <AddExperienceDialog name={search} isOpen={showAddDialog} tags={props.tags} onAdd={handleAddExperience} onClose={handleClose} />\r\n            {showEditDialog && activeExperience &&\r\n                <EditExperienceDialog experience={activeExperience} isOpen={showEditDialog} tags={props.tags} onSave={handleEditSaveClick} onClose={handleClose} />\r\n            }\r\n            <ShortcutsDialog isOpen={showShortcutsDialog} onClose={() => setShowShortcutsDialog(false)} />\r\n            <BottomSheet open={showOptions} onClose={handleCloseOptions}>\r\n                <div className=\"list-group list-group-flush\">\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleClick(activeId)}>Mark as done</a>\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleEditOpenClick(activeId)}>Edit</a>\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleDelete(activeId)}>Delete</a>\r\n                </div>\r\n            </BottomSheet>\r\n            <Toast message={toastMessage} show={showToast} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { IExperience } from \"../IExperience\";\r\nimport { IStorage } from \"../IStorage\";\r\n\r\ninterface IProps {\r\n    storage: IStorage;\r\n    onNavigation(component: string): void;\r\n}\r\n\r\ninterface IPreferences {\r\n    showMaybeAgainCard: boolean;\r\n    showNeverCard: boolean;\r\n}\r\n\r\nexport const Preferences: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const fileInput: any = React.createRef();\r\n\r\n    const prefShowMaybeAgainCard = localStorage.getItem(\"showMaybeAgainCard\") || \"false\";\r\n    const prefShowNeverCard = localStorage.getItem(\"showNeverCard\") || \"true\";\r\n\r\n    const [preferences, setPreferences] = useState<IPreferences>({\r\n        showMaybeAgainCard: prefShowMaybeAgainCard === \"true\",\r\n        showNeverCard: prefShowNeverCard === \"true\",\r\n    });\r\n\r\n    function handleExport(): void {\r\n        const json = JSON.stringify(props.storage.get());\r\n        const file = new File([json], \"cocoberry.json\", { type: \"octet/stream\" });\r\n        const url = window.URL.createObjectURL(file);\r\n        window.location.assign(url);\r\n    }\r\n\r\n    function handleBrowse(): void {\r\n        const elem = document.getElementById(\"file\");\r\n        const input = elem as HTMLInputElement;\r\n        input.click();\r\n    }\r\n\r\n    function handleImport(): void {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            if (typeof reader.result === \"string\") {\r\n                try {\r\n                    const experiences = JSON.parse(reader.result) as IExperience[];\r\n                    //props.onImport(experiences);\r\n                    props.storage.add_many(experiences);\r\n                } catch (e) {\r\n                    alert(e);\r\n                }\r\n            }\r\n        };\r\n        const file: File = fileInput.current.files[0];\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    function handlePreferenceChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentTarget = event.currentTarget;\r\n        setPreferences((prevState: IPreferences) => {\r\n            const preferences: any = { ...prevState };\r\n            preferences[currentTarget.id] = currentTarget.checked;\r\n            return preferences;\r\n        });\r\n        localStorage.setItem(currentTarget.id, currentTarget.checked.toString());\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"fixed-top shadow-sm\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n                    <div className=\"container-fluid\">\r\n                        <button className=\"btn btn-outline-success\" accessKey=\"b\" onClick={() => props.onNavigation(\"\")}>Back</button>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n            <main className=\"App container\">\r\n\r\n                <div className=\"list-group mb-3\">\r\n                    <div className=\"list-group-item\">\r\n                        <div className=\"form-check form-switch\">\r\n                            <input\r\n                                className=\"form-check-input\"\r\n                                id=\"showMaybeAgainCard\"\r\n                                type=\"checkbox\"\r\n                                checked={preferences.showMaybeAgainCard}\r\n                                onChange={handlePreferenceChanged}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"showMaybeAgainCard\">Show the maybe-again card</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list-group-item\">\r\n                        <div className=\"form-check form-switch\">\r\n                            <input\r\n                                className=\"form-check-input\"\r\n                                id=\"showNeverCard\"\r\n                                type=\"checkbox\"\r\n                                checked={preferences.showNeverCard}\r\n                                onChange={handlePreferenceChanged}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"showNeverCard\">Show the you-have-never card</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Export and import experiences</h5>\r\n                        <p className=\"card-text\">Your experiences can be imported and exported. They are stored in the JSON format.</p>\r\n                        <input className=\"form-control-file\" id=\"file\" type=\"file\" accept=\"application/json\" onChange={handleImport} ref={fileInput} hidden required />\r\n                    </div>\r\n                    <div className=\"list-group list-group-flush\">\r\n                        <button className=\"list-group-item list-group-item-action\" type=\"button\" accessKey=\"i\" onClick={handleBrowse}>Import from file</button>\r\n                        <button className=\"list-group-item list-group-item-action\" type=\"button\" accessKey=\"e\" onClick={handleExport}>Export to file</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </main>\r\n\r\n            <footer className=\"container mt-3\">\r\n                <p><a href=\"https://github.com/vanillajonathan/cocoberry\" rel=\"noopener\" target=\"_blank\">Cocoberry on GitHub</a></p>\r\n                <p>Built with ❤ by Jonathan</p>\r\n            </footer>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Preferences } from \"./views/Preferences\";\r\n\r\ninterface IProps {\r\n    seed: INewExperience[];\r\n    storage: IStorage;\r\n    tags: string[];\r\n}\r\n\r\nconst App: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const experiences = props.storage.get();\r\n    if (experiences.length === 0) {\r\n        props.storage.add_many(props.seed);\r\n    }\r\n    const [nav, setNav] = useState(\"\");\r\n\r\n    function handleNavigation(component: string): void {\r\n        setNav(component);\r\n    }\r\n\r\n    if (nav === \"Preferences\") {\r\n        return (\r\n            <Preferences\r\n                storage={props.storage}\r\n                onNavigation={handleNavigation}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Home\r\n            experiences={props.storage.get()}\r\n            onNavigation={handleNavigation}\r\n            tags={props.tags}\r\n        />\r\n    );\r\n};\r\n\r\nApp.defaultProps = {\r\n    seed: [],\r\n    tags: [],\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { LocalStorage } from \"./localStorage\";\r\n//import * as data from \"./seed.json\";\r\n\r\nimport seed from \"./seed.json\";\r\n\r\nconst experiences: INewExperience[] = [\r\n    { name: \"Eat apple 🍏\", last: new Date(2018, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat avocado 🥑\", last: new Date(2016, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat banana 🍌\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat broccoli 🥦\", tag: \"vegetable\" },\r\n    { name: \"Eat carrot 🥕\", tag: \"vegetable\" },\r\n    { name: \"Eat cherries 🍒\", last: new Date(2017, 5, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat chili 🌶️\", tag: \"fruit\" },\r\n    { name: \"Eat cucumber 🥒\", last: new Date(2017, 6, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat corn 🌽\", last: new Date(2017, 6, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat coconut 🥥\", last: new Date(2017, 7, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat eggplant 🍆\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat garlic 🧄\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat grapes 🍇\", last: new Date(2017, 9, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat leafy green 🥬\", tag: \"fruit\" },\r\n    { name: \"Eat lemon 🍋\", tag: \"fruit\" },\r\n    { name: \"Eat kiwi 🥝\", last: new Date(2017, 10, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat mango 🥭\", last: new Date(2017, 11, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat melon 🍈\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat mushroom 🍄\", last: new Date(2017, 4, 3).getTime() },\r\n    { name: \"Eat onion 🧅\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat orange 🍊\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat peach 🍑\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat peanuts 🥜\", tag: \"fruit\" },\r\n    { name: \"Eat pear 🍐\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat pineapple 🍍\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat potato 🥔\", last: new Date(2018, 10, 1).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat tomato 🍅\", last: new Date(2018, 10, 1).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat strawberry 🍓\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat watermelon 🍉\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Get a massage 💆‍♂️💆‍♀️\", tag: \"activity\" },\r\n    { name: \"Bake a applepie 🥧🍪\", last: new Date(2018, 7, 13).getTime() },\r\n    { name: \"Basketball 🏀\", tag: \"activity\" },\r\n    { name: \"Bike 🚴\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Bowling 🎳\", last: null, tag: \"activity\" },\r\n    { name: \"Box 🥊\", last: null, tag: \"activity\" },\r\n    { name: \"Climb 🧗\", last: null, tag: \"activity\" },\r\n    { name: \"Cold shower 🥶🚿\", tag: \"activity\" },\r\n    { name: \"Dance 💃🕺\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Fasting 🍽\" },\r\n    { name: \"Football ⚽\", tag: \"activity\" },\r\n    { name: \"Guitar 🎸\", last: null, tag: \"activity\" },\r\n    { name: \"Ice bath 🥶🛀\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Ice skate ⛸️\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Meditate 🧘‍\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Read 📖\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Run 🏃\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Paint 🎨\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Play chess ♟️\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Play pool 🎱\", last: null, tag: \"activity\" },\r\n    { name: \"Sauna 🧖‍♂️🧖‍♀️\", tag: \"activity\" },\r\n    { name: \"Ski 🎿\", tag: \"activity\" },\r\n    { name: \"Swim 🏊\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Theatre 🎭\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Yoga 🧘\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Watch a movie 🎬\", last: null, tag: \"activity\" },\r\n    { name: \"Volleyball 🏐\", last: null, tag: \"activity\" },\r\n    { name: \"Wrestle 🤼\", last: null, tag: \"activity\" },\r\n    { name: \"Cook pasta 🍝\", last: null },\r\n    { name: \"Beach 🏖\", last: null, tag: \"places\" },\r\n    { name: \"Botanical garden 🌿\", last: null, tag: \"places\" },\r\n    { name: \"Cemetery ⚱️\", last: null, tag: \"places\" },\r\n    { name: \"Museum 🖼\", last: null, tag: \"places\" },\r\n    { name: \"Park 🏞\", last: null, tag: \"places\" },\r\n];\r\n\r\nconst storage: IStorage = new LocalStorage();\r\nconst tags: string[] = [\"Activity\", \"Fruit\", \"Places\", \"Vegetable\"];\r\n\r\nReactDOM.render(<App seed={experiences} storage={storage} tags={tags} />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.register();\r\n","import { v4 as uuid } from \"uuid\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { IExperience } from \"./IExperience\";\r\n\r\nexport class LocalStorage implements IStorage {\r\n    public add(experience: INewExperience): void {\r\n        const experiences = this.get();\r\n        const item: IExperience = {\r\n            id: uuid(),\r\n            last: experience.last,\r\n            name: experience.name,\r\n            tag: experience.tag,\r\n        };\r\n        experiences.push(item);\r\n        localStorage.setItem(\"experiences\", JSON.stringify(experiences));\r\n    }\r\n\r\n    public add_many(experiences: INewExperience[]): void {\r\n        const data = this.get();\r\n        for (const experience of experiences) {\r\n            const item: IExperience = {\r\n                id: uuid(),\r\n                last: experience.last,\r\n                name: experience.name,\r\n                tag: experience.tag,\r\n            };\r\n            data.push(item);\r\n        }\r\n        localStorage.setItem(\"experiences\", JSON.stringify(data));\r\n    }\r\n\r\n    public delete(id: string): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public get(): IExperience[] {\r\n        const experiences = localStorage.getItem(\"experiences\");\r\n        if (experiences === null) {\r\n            return [];\r\n        }\r\n        return JSON.parse(experiences);\r\n    }\r\n\r\n    public update(experience: IExperience): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n"],"sourceRoot":""}