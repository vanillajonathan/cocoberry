{"version":3,"sources":["components/TagList.tsx","components/AddExperienceDialog.tsx","components/EditExperienceDialog.tsx","components/ExperienceList.tsx","components/OptionsSheet.tsx","components/MaybeAgainCard.tsx","components/NeverCard.tsx","components/PwaInstaller.tsx","components/ShortcutsDialog.tsx","components/Toast.tsx","views/Home.tsx","views/Preferences.tsx","App.tsx","serviceWorker.ts","index.tsx","localStorage.tsx"],"names":["TagList","props","handleClick","event","activeTag","currentTarget","innerText","toLowerCase","onClick","className","tags","map","tag","key","AddExperienceDialog","useState","name","setName","setTag","nameInput","React","handleClose","onClose","useEffect","current","focus","backdropClassName","isOpen","tabIndex","role","type","data-dismiss","aria-label","aria-hidden","onSubmit","preventDefault","onAdd","htmlFor","id","value","onChange","target","ref","autoFocus","required","defaultProps","EditExperienceDialog","experience","last","setLast","onSave","tagName","Date","toISOString","substring","date","getTime","ExperienceList","compare","a","b","weekAgo","experiences","filter","x","moment","subtract","valueOf","sort","monthAgo","yearAgo","reverse","weekGroup","onEdit","monthGroup","yearGroup","length","ExperienceListGroup","toLocaleDateString","dateTime","title","toLocaleString","fromNow","BottomSheet","open","style","zIndex","children","MaybeAgainCard","timeAgo","NeverCard","PwaInstaller","deferredPrompt","showInstallPrompt","setShowInstallPrompt","beforeInstallPrompt","window","addEventListener","removeEventListener","prompt","userChoice","then","choiceResult","outcome","console","log","ShortcutsDialog","Toast","show","aria-live","aria-atomic","message","Home","myExperiences","activeId","setActiveId","activeExperience","setActiveExperience","setExperiences","maybeAgainCardExperience","setMaybeAgainCardExperience","neverCardExperience","setNeverCardExperience","setReverse","search","setSearch","showAddDialog","setShowDialog","showEditDialog","setShowEditDialog","showShortcutsDialog","setShowShortcutsDialog","showOptions","setShowOptions","showTags","setShowTags","showToast","setShowToast","toastMessage","setToastMessage","prefShowMaybeAgainCard","localStorage","getItem","prefShowNeverCard","showMaybeAgainCard","showNeverCard","timerId","handleAddExperienceButtonClick","handleEditOpenClick","randomExperience","Math","floor","random","maybeExp","undefined","exp","includes","accessKey","placeholder","parentElement","classList","toggle","prevState","onNavigation","find","uuid","e","clearTimeout","setTimeout","i","Preferences","fileInput","preferences","setPreferences","handlePreferenceChanged","checked","setItem","toString","accept","reader","FileReader","onloadend","result","JSON","parse","storage","add_many","alert","file","files","readAsText","hidden","document","getElementById","click","json","stringify","get","File","url","URL","createObjectURL","location","assign","href","rel","App","seed","nav","setNav","handleNavigation","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","add","this","item","push","data","delete","Error","update","ReactDOM","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4dcad3eb.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    activeTag: string;\r\n    tags: string[];\r\n    onClick(tag: string): void;\r\n}\r\n\r\nexport const TagList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    function handleClick(event: React.MouseEvent<HTMLElement>): void {\r\n        let activeTag = event.currentTarget.innerText.toLowerCase();\r\n        if (activeTag === props.activeTag) {\r\n            activeTag = \"\";\r\n        }\r\n        props.onClick(activeTag);\r\n    }\r\n\r\n    return (\r\n        <ul className=\"list-inline\">\r\n            {props.tags.map(tag => {\r\n                let className = \"badge \";\r\n                className += (tag.toLowerCase() === props.activeTag ? \"bg-primary\" : \"bg-light text-dark\");\r\n                return <li className=\"list-inline-item\" key={tag}><span className={className} onClick={handleClick}>{tag}</span></li>;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { TagList } from \"./TagList\";\r\n\r\ninterface IProps {\r\n    name: string;\r\n    isOpen: boolean;\r\n    tags: string[];\r\n    onAdd(name: string, tag: string): void;\r\n    onClose(): void;\r\n}\r\n\r\nexport const AddExperienceDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [name, setName] = useState(props.name);\r\n    const [tag, setTag] = useState(\"\");\r\n    const nameInput = React.createRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        if (nameInput.current) {\r\n            nameInput.current.focus();\r\n        }\r\n    });\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    function handleClose(): void {\r\n        props.onClose();\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>): void {\r\n        event.preventDefault();\r\n        props.onAdd(name, tag);\r\n    }\r\n\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Add experience</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={handleClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"name\">Title</label>\r\n                                    <input className=\"form-control\" id=\"name\" type=\"text\" value={name} onChange={handleChange} ref={nameInput} autoFocus required />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label>Tag</label>\r\n                                    <TagList\r\n                                        activeTag={tag}\r\n                                        tags={props.tags}\r\n                                        onClick={tag => setTag(tag)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={handleClose}>Close</button>\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Add</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nAddExperienceDialog.defaultProps = {\r\n    name: \"\",\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { TagList } from \"./TagList\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    isOpen: boolean;\r\n    tags: string[];\r\n    onClose(): void;\r\n    onSave(experience: IExperience): void;\r\n}\r\n\r\nexport const EditExperienceDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [name, setName] = useState(props.experience.name);\r\n    const [tag, setTag] = useState(props.experience.tag || \"\");\r\n    const [last, setLast] = useState(props.experience.last || 0);\r\n    const nameInput = React.createRef<HTMLInputElement>();\r\n\r\n    useEffect(() => {\r\n        if (nameInput.current) {\r\n            nameInput.current.focus();\r\n        }\r\n    });\r\n\r\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    function handleSetTag(tagName: string): void {\r\n        setTag(tagName);\r\n    }\r\n\r\n    function handleTimeChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const date = new Date(event.target.value);\r\n        setLast(date.getTime());\r\n    }\r\n\r\n    function handleClose(): void {\r\n        props.onClose();\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>): void {\r\n        event.preventDefault();\r\n        const experience: IExperience = { id: props.experience.id, name: name, tag: tag, last: last };\r\n        props.onSave(experience);\r\n    }\r\n\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Edit experience</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={handleClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"name\">Title</label>\r\n                                    <input className=\"form-control\" id=\"name\" type=\"text\" value={name} onChange={handleChange} ref={nameInput} autoFocus required />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label>Tag</label>\r\n                                    <TagList activeTag={tag} tags={props.tags} onClick={handleSetTag} />\r\n                                </div>\r\n                                <div className=\"mb-3\">\r\n                                    <label htmlFor=\"time\">Last</label>\r\n                                    <input className=\"form-control\" id=\"time\" type=\"datetime-local\" value={new Date(last).toISOString().substring(0, 16)} onChange={handleTimeChange} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={handleClose}>Close</button>\r\n                                <button type=\"submit\" className=\"btn btn-primary\">Save</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experiences: IExperience[];\r\n    reverse?: boolean;\r\n    onClick(id: string): void;\r\n    onEdit(id: string): void;\r\n}\r\n\r\nexport const ExperienceList: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    function compare(a: IExperience, b: IExperience): number {\r\n        if (a.last == null || b.last == null) {\r\n            return 0;\r\n        }\r\n        if (a.last < b.last) {\r\n            return -1;\r\n        }\r\n        if (a.last > b.last) {\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    const weekAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"w\").valueOf() &&\r\n            x.last > moment().subtract(2, \"w\").valueOf()).sort(compare);\r\n\r\n    const monthAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"m\").valueOf() &&\r\n            x.last > moment().subtract(2, \"m\").valueOf()).sort(compare);\r\n\r\n    const yearAgo = props.experiences\r\n        .filter(x => x.last != null &&\r\n            x.last < moment().subtract(1, \"y\").valueOf() &&\r\n            x.last > moment().subtract(2, \"y\").valueOf()).sort(compare);\r\n\r\n    let experiences = props.experiences.sort(compare);\r\n    if (props.reverse) {\r\n        experiences = experiences.reverse();\r\n    }\r\n\r\n    const weekGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A week ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={weekAgo} />\r\n        </React.Fragment>);\r\n\r\n    const monthGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A month ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={monthAgo} />\r\n        </React.Fragment>);\r\n\r\n    const yearGroup = (\r\n        <React.Fragment>\r\n            <h2 className=\"h5\">A year ago</h2>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={yearAgo} />\r\n        </React.Fragment>);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ExperienceListGroup onClick={props.onClick} onEdit={props.onEdit} experiences={experiences} />\r\n            {weekAgo.length > 0 && weekGroup}\r\n            {monthAgo.length > 0 && monthGroup}\r\n            {yearAgo.length > 0 && yearGroup}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\ninterface IExperienceListGroupProps {\r\n    experiences: IExperience[];\r\n    onClick(id: string): void;\r\n    onEdit(id: string): void;\r\n}\r\n\r\nconst ExperienceListGroup: React.FunctionComponent<IExperienceListGroupProps> = (props: IExperienceListGroupProps) => {\r\n    function last(experience: any): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <div><small className=\"float-right text-muted\">{new Date(experience.last).toLocaleDateString(\"sv-se\")}</small></div>\r\n                <time className=\"d-block text-muted small\" dateTime={new Date(experience.last).toISOString()} title={new Date(experience.last).toLocaleString()}>{moment(experience.last).fromNow()}</time>\r\n            </React.Fragment>);\r\n    }\r\n\r\n    return (\r\n        <div className=\"list-group mb-3\">\r\n            {props.experiences.map(experience =>\r\n                <a className=\"list-group-item list-group-item-action\" key={experience.id} onClick={() => props.onClick(experience.id)}>\r\n                    {experience.name}\r\n                    {experience.last != null && last(experience)}\r\n                </a>\r\n            )}\r\n        </div>);\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IBottomSheetProps {\r\n    children: JSX.Element;\r\n    open: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nexport const BottomSheet: React.FunctionComponent<IBottomSheetProps> = (props: IBottomSheetProps) => {\r\n    let className = \"fixed-bottom fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.open) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    if (props.open) {\r\n        return (\r\n            <React.Fragment>\r\n                <div className={className} tabIndex={-1} role=\"dialog\" style={{ zIndex: 2000 }}>\r\n                    {props.children}\r\n                </div>\r\n                <div className={backdropClassName} onClick={props.onClose}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\ninterface IOptionSheetProps {\r\n    id: string;\r\n    open: boolean;\r\n    onClose(): void;\r\n    onDone(id: string): void;\r\n    onEdit(id: string): void;\r\n    onDelete(id: string): void;\r\n}\r\n\r\nexport const OptionsSheet: React.FunctionComponent<IOptionSheetProps> = (props: IOptionSheetProps) => {\r\n    return (\r\n        <BottomSheet open={props.open} onClose={props.onClose}>\r\n            <div className=\"list-group list-group-flush\">\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onDone(props.id)}>Mark as done</a>\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onEdit(props.id)}>Edit</a>\r\n                <a className=\"list-group-item list-group-item-action\" onClick={() => props.onDelete(props.id)}>Delete</a>\r\n            </div>\r\n        </BottomSheet>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport moment from \"moment\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    onClick(id: string): void;\r\n}\r\n\r\nexport const MaybeAgainCard: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const timeAgo = moment(props.experience.last || 0).fromNow();\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                <small className=\"text-muted text-uppercase\">It was {timeAgo}, Maybe again…</small>\r\n                <div>{props.experience.name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { IExperience } from \"../IExperience\";\r\n\r\ninterface IProps {\r\n    experience: IExperience;\r\n    onClick(id: string): void;\r\n}\r\n\r\nexport const NeverCard: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    return (\r\n        <div className=\"card mb-3\">\r\n            <div className=\"card-body\">\r\n                <small className=\"text-muted text-uppercase\">You have never…</small>\r\n                <div>{props.experience.name}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport const PwaInstaller: React.FunctionComponent = () => {\r\n    let deferredPrompt: any;\r\n    const [showInstallPrompt, setShowInstallPrompt] = useState(false);\r\n\r\n    function handleInstall(): void {\r\n        setShowInstallPrompt(false);\r\n        deferredPrompt.prompt();\r\n        deferredPrompt.userChoice.then((choiceResult: any) => {\r\n            if (choiceResult.outcome === \"accepted\") {\r\n                console.log(\"User accepted the A2HS prompt\");\r\n            } else {\r\n                console.log(\"User dismissed the A2HS prompt\");\r\n            }\r\n            deferredPrompt = null;\r\n        });\r\n    }\r\n\r\n    function beforeInstallPrompt(event: Event): void {\r\n        deferredPrompt = event;\r\n        setShowInstallPrompt(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"beforeinstallprompt\", beforeInstallPrompt);\r\n        return () => {\r\n            window.removeEventListener(\"beforeinstallprompt\", beforeInstallPrompt);\r\n        };\r\n    });\r\n\r\n    if (showInstallPrompt) {\r\n        return (\r\n            <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-inline\" onClick={handleInstall} title=\"Install web application\">Install</button>\r\n        );\r\n    }\r\n\r\n    return null;\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    onClose(): void;\r\n}\r\n\r\nexport const ShortcutsDialog: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    let className = \"modal fade\";\r\n    let backdropClassName = \"fade\";\r\n    if (props.isOpen) {\r\n        className += \" d-block show\";\r\n        backdropClassName += \" modal-backdrop show\";\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className={className} tabIndex={-1} role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">Keyboard Shortcuts</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={props.onClose}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"container-fluid\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>N</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Add new experience</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>S</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Search</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>P</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Preferences</div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col\">\r\n                                        <kbd><kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>R</kbd></kbd>\r\n                                    </div>\r\n                                    <div className=\"col\">Reverse sort</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\" onClick={props.onClose}>Close</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={backdropClassName} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\n\r\ninterface IProps {\r\n    message: string;\r\n    show: boolean;\r\n}\r\n\r\nexport const Toast: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    let className = \"toast fixed-bottom bg-dark text-white mx-auto mb-3 fade\";\r\n    if (props.show) {\r\n        className += \" show\";\r\n    }\r\n    return (\r\n        <div className={className} role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n            <div className=\"toast-body\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { AddExperienceDialog } from \"../components/AddExperienceDialog\";\r\nimport { EditExperienceDialog } from \"../components/EditExperienceDialog\";\r\nimport { IExperience } from \"../IExperience\";\r\nimport { ExperienceList } from \"../components/ExperienceList\";\r\nimport { BottomSheet } from \"../components/OptionsSheet\";\r\nimport { MaybeAgainCard } from \"../components/MaybeAgainCard\";\r\nimport { NeverCard } from \"../components/NeverCard\";\r\nimport { PwaInstaller } from \"../components/PwaInstaller\";\r\nimport { ShortcutsDialog } from \"../components/ShortcutsDialog\";\r\nimport { TagList } from \"../components/TagList\";\r\nimport { Toast } from \"../components/Toast\";\r\nimport \"./Home.css\";\r\n\r\ninterface IProps {\r\n    experiences: IExperience[];\r\n    tags: string[];\r\n    onNavigation(component: string): void;\r\n}\r\n\r\nexport const Home: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const [activeId, setActiveId] = useState(\"\");\r\n    const [activeExperience, setActiveExperience] = useState<IExperience>();\r\n    //const [experiences, setExperiences] = useState(props.storage.get());\r\n    const [experiences, setExperiences] = useState(props.experiences);\r\n    const [maybeAgainCardExperience, setMaybeAgainCardExperience] = useState<IExperience | null>(null);\r\n    const [neverCardExperience, setNeverCardExperience] = useState<IExperience | null>(null);\r\n    const [reverse, setReverse] = useState(false);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [showAddDialog, setShowDialog] = useState(false);\r\n    const [showEditDialog, setShowEditDialog] = useState(false);\r\n    const [showShortcutsDialog, setShowShortcutsDialog] = useState(false);\r\n    const [showOptions, setShowOptions] = useState(false);\r\n    const [showTags, setShowTags] = useState(false);\r\n    const [showToast, setShowToast] = useState(false);\r\n    const [tag, setTag] = useState(\"\");\r\n    const [toastMessage, setToastMessage] = useState(\"\");\r\n\r\n    const prefShowMaybeAgainCard = localStorage.getItem(\"showMaybeAgainCard\") || \"false\";\r\n    const prefShowNeverCard = localStorage.getItem(\"showNeverCard\") || \"true\";\r\n\r\n    const [showMaybeAgainCard] = useState(prefShowMaybeAgainCard === \"true\");\r\n    const [showNeverCard] = useState(prefShowNeverCard === \"true\");\r\n\r\n    let timerId: number = 0;\r\n\r\n    useEffect(() => {\r\n        if (props.experiences.length !== 0) {\r\n            const maybeExp = randomExperience(props.experiences.filter(x => x.last !== null && x.last !== undefined));\r\n            setMaybeAgainCardExperience(maybeExp);\r\n            const exp = randomExperience(props.experiences.filter(x => x.last === null));\r\n            setNeverCardExperience(exp);\r\n        }\r\n    }, [props.experiences]);\r\n\r\n    function handleAddExperience(name: string, tag: string): void {\r\n        setShowDialog(false);\r\n        const experience: IExperience = {\r\n            id: uuid(),\r\n            name,\r\n            tag,\r\n        };\r\n        setExperiences((prevState: IExperience[]) => [...prevState, experience]);\r\n    }\r\n\r\n    function handleAddExperienceButtonClick(): void {\r\n        setShowDialog(true);\r\n    }\r\n\r\n    function handleClick(key: string): void {\r\n        setShowOptions(false);\r\n        setExperiences((prevState: IExperience[]) => prevState.map(i => i.id === key ? { ...i, last: new Date().getTime() } : i));\r\n        setToastMessage(\"Marked as done\");\r\n        setShowToast(true);\r\n        window.clearTimeout(timerId);\r\n        timerId = window.setTimeout(() => {\r\n            setShowToast(false);\r\n        }, 1500);\r\n    }\r\n\r\n    function handleDelete(key: string): void {\r\n        setShowOptions(false);\r\n        setExperiences((prevState: IExperience[]) => (prevState.filter(e => e.id !== key)));\r\n        setToastMessage(\"Removed\");\r\n        setShowToast(true);\r\n        window.clearTimeout(timerId);\r\n        timerId = window.setTimeout(() => {\r\n            setShowToast(false);\r\n        }, 1500);\r\n    }\r\n\r\n    function handleOpenOptions(id: string): void {\r\n        setActiveId(id);\r\n        const exp = experiences.find(x => x.id === id);\r\n        setActiveExperience(exp);\r\n        setShowOptions(true);\r\n    }\r\n\r\n    function handleCloseOptions(): void {\r\n        setShowOptions(false);\r\n    }\r\n\r\n    function handleEditOpenClick(tag: string): void {\r\n        setShowOptions(false);\r\n        setShowEditDialog(true);  \r\n    }\r\n\r\n    function handleEditSaveClick(experience: IExperience): void {\r\n        setShowEditDialog(false);\r\n        setExperiences((prevState: IExperience[]) => (prevState.map(e => {\r\n            if (e.id === experience.id) {\r\n                e = experience;\r\n            }\r\n            return e;\r\n        })));\r\n        setToastMessage(\"Edited:\" + experience.name);\r\n        setShowToast(true);\r\n        window.clearTimeout(timerId);\r\n        timerId = window.setTimeout(() => {\r\n            setShowToast(false);\r\n        }, 1500);\r\n    }\r\n\r\n    function handleChange(event: React.FormEvent<HTMLInputElement>): void {\r\n        setSearch(event.currentTarget.value);\r\n    }\r\n\r\n    function handleDropdownClick(event: any): void {\r\n        event.target.parentElement.classList.toggle(\"dropup\");\r\n        setShowTags((prevState: boolean) => !prevState);\r\n    }\r\n\r\n    function handleSort(): void {\r\n        setReverse((prevState: boolean) => !prevState);\r\n    }\r\n\r\n    function handleTagClick(tag: string): void {\r\n        setTag(tag);\r\n    }\r\n\r\n    function handleClose(): void {\r\n        setShowDialog(false);\r\n        setShowEditDialog(false);\r\n    }\r\n\r\n    function randomExperience(experiences: IExperience[]): IExperience {\r\n        return experiences[Math.floor(Math.random() * experiences.length)];\r\n    }\r\n\r\n    let myExperiences: IExperience[];\r\n    if (search !== \"\" || tag !== \"\") {\r\n        myExperiences = experiences.filter(x => x.name.toLowerCase().includes(search.toLowerCase()));\r\n        if (tag !== \"\") {\r\n            myExperiences = myExperiences.filter(x => x.tag != null && x.tag.includes(tag));\r\n        }\r\n    } else {\r\n        myExperiences = experiences.filter(x => x.last != null);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"bg-white fixed-top shadow-sm\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"d-flex flex-grow-1\">\r\n                            <span className=\"navbar-brand d-none d-xl-block\">Cocoberry</span>\r\n                            <div className=\"mr-auto\">\r\n                                <div className=\"input-group\">\r\n                                    <input className=\"form-control\" type=\"search\" accessKey=\"s\" placeholder=\"Search…\" title=\"Search\" onChange={handleChange} aria-label=\"Search\" />\r\n                                    <button className=\"btn btn-outline-success dropdown-toggle\" type=\"button\" onClick={handleDropdownClick} aria-label=\"Show tags\" />\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <PwaInstaller />\r\n                                <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-inline\" accessKey=\"?\" onClick={() => setShowShortcutsDialog(true)} title=\"Shortcuts\">K</button>\r\n                                <button className=\"btn btn-outline-success mr-sm-2 d-none d-xl-inline\" accessKey=\"r\" onClick={handleSort} title=\"Sort\">▲</button>\r\n                                <button className=\"btn btn-outline-success mr-sm-2\" accessKey=\"n\" onClick={handleAddExperienceButtonClick} title=\"Add new experience\">+</button>\r\n                                <button className=\"btn btn-outline-success\" accessKey=\"p\" onClick={() => props.onNavigation(\"Preferences\")}>☰</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n                {showTags &&\r\n                    <div className=\"container\">\r\n                        <TagList activeTag={tag} tags={props.tags} onClick={handleTagClick} />\r\n                    </div>\r\n                }\r\n            </header>\r\n            <main className=\"App container\">\r\n                {showMaybeAgainCard && search === \"\" && tag === \"\" && maybeAgainCardExperience &&\r\n                    <MaybeAgainCard experience={maybeAgainCardExperience} onClick={handleEditOpenClick} />\r\n                }\r\n                {showNeverCard && search === \"\" && tag === \"\" && neverCardExperience &&\r\n                    <NeverCard experience={neverCardExperience} onClick={handleEditOpenClick} />\r\n                }\r\n                <ExperienceList experiences={myExperiences} reverse={reverse} onClick={handleOpenOptions} onEdit={handleEditOpenClick} />\r\n                {search !== \"\" && myExperiences.length === 0 &&\r\n                    <React.Fragment>\r\n                        <p>There are no matched experiences.</p>\r\n                        <button className=\"btn btn-outline-secondary\" onClick={handleAddExperienceButtonClick}>Add new experience</button>\r\n                    </React.Fragment>\r\n                }\r\n            </main>\r\n            <AddExperienceDialog name={search} isOpen={showAddDialog} tags={props.tags} onAdd={handleAddExperience} onClose={handleClose} />\r\n            {showEditDialog && activeExperience &&\r\n                <EditExperienceDialog experience={activeExperience} isOpen={showEditDialog} tags={props.tags} onSave={handleEditSaveClick} onClose={handleClose} />\r\n            }\r\n            <ShortcutsDialog isOpen={showShortcutsDialog} onClose={() => setShowShortcutsDialog(false)} />\r\n            <BottomSheet open={showOptions} onClose={handleCloseOptions}>\r\n                <div className=\"list-group list-group-flush\">\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleClick(activeId)}>Mark as done</a>\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleEditOpenClick(activeId)}>Edit</a>\r\n                    <a className=\"list-group-item list-group-item-action\" onClick={() => handleDelete(activeId)}>Delete</a>\r\n                </div>\r\n            </BottomSheet>\r\n            <Toast message={toastMessage} show={showToast} />\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { IExperience } from \"../IExperience\";\r\nimport { IStorage } from \"../IStorage\";\r\n\r\ninterface IProps {\r\n    storage: IStorage;\r\n    onNavigation(component: string): void;\r\n}\r\n\r\ninterface IPreferences {\r\n    showMaybeAgainCard: boolean;\r\n    showNeverCard: boolean;\r\n}\r\n\r\nexport const Preferences: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const fileInput: any = React.createRef();\r\n\r\n    const prefShowMaybeAgainCard = localStorage.getItem(\"showMaybeAgainCard\") || \"false\";\r\n    const prefShowNeverCard = localStorage.getItem(\"showNeverCard\") || \"true\";\r\n\r\n    const [preferences, setPreferences] = useState<IPreferences>({\r\n        showMaybeAgainCard: prefShowMaybeAgainCard === \"true\",\r\n        showNeverCard: prefShowNeverCard === \"true\",\r\n    });\r\n\r\n    function handleExport(): void {\r\n        const json = JSON.stringify(props.storage.get());\r\n        const file = new File([json], \"cocoberry.json\", { type: \"octet/stream\" });\r\n        const url = window.URL.createObjectURL(file);\r\n        window.location.assign(url);\r\n    }\r\n\r\n    function handleBrowse(): void {\r\n        const elem = document.getElementById(\"file\");\r\n        const input = elem as HTMLInputElement;\r\n        input.click();\r\n    }\r\n\r\n    function handleImport(): void {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            if (typeof reader.result === \"string\") {\r\n                try {\r\n                    const experiences = JSON.parse(reader.result) as IExperience[];\r\n                    //props.onImport(experiences);\r\n                    props.storage.add_many(experiences);\r\n                } catch (e) {\r\n                    alert(e);\r\n                }\r\n            }\r\n        };\r\n        const file: File = fileInput.current.files[0];\r\n        reader.readAsText(file);\r\n    }\r\n\r\n    function handlePreferenceChanged(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentTarget = event.currentTarget;\r\n        setPreferences((prevState: IPreferences) => {\r\n            const preferences: any = { ...prevState };\r\n            preferences[currentTarget.id] = currentTarget.checked;\r\n            return preferences;\r\n        });\r\n        localStorage.setItem(currentTarget.id, currentTarget.checked.toString());\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header className=\"fixed-top shadow-sm\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-white\">\r\n                    <div className=\"container-fluid\">\r\n                        <button className=\"btn btn-outline-success\" accessKey=\"b\" onClick={() => props.onNavigation(\"\")}>Back</button>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n            <main className=\"App container\">\r\n\r\n                <div className=\"list-group mb-3\">\r\n                    <div className=\"list-group-item\">\r\n                        <div className=\"form-check form-switch\">\r\n                            <input\r\n                                className=\"form-check-input\"\r\n                                id=\"showMaybeAgainCard\"\r\n                                type=\"checkbox\"\r\n                                checked={preferences.showMaybeAgainCard}\r\n                                onChange={handlePreferenceChanged}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"showMaybeAgainCard\">Show the maybe-again card</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"list-group-item\">\r\n                        <div className=\"form-check form-switch\">\r\n                            <input\r\n                                className=\"form-check-input\"\r\n                                id=\"showNeverCard\"\r\n                                type=\"checkbox\"\r\n                                checked={preferences.showNeverCard}\r\n                                onChange={handlePreferenceChanged}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"showNeverCard\">Show the you-have-never card</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Export and import experiences</h5>\r\n                        <p className=\"card-text\">Your experiences can be imported and exported. They are stored in the JSON format.</p>\r\n                        <input className=\"form-control-file\" id=\"file\" type=\"file\" accept=\"application/json\" onChange={handleImport} ref={fileInput} hidden required />\r\n                    </div>\r\n                    <div className=\"list-group list-group-flush\">\r\n                        <button className=\"list-group-item list-group-item-action\" type=\"button\" accessKey=\"i\" onClick={handleBrowse}>Import from file</button>\r\n                        <button className=\"list-group-item list-group-item-action\" type=\"button\" accessKey=\"e\" onClick={handleExport}>Export to file</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </main>\r\n\r\n            <footer className=\"container mt-3\">\r\n                <p><a href=\"https://github.com/vanillajonathan/cocoberry\" rel=\"noopener noreferrer\" target=\"_blank\">Cocoberry on GitHub</a></p>\r\n                <p>Built with ❤ by Jonathan</p>\r\n            </footer>\r\n\r\n        </React.Fragment>\r\n    );\r\n};\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { Home } from \"./views/Home\";\r\nimport { Preferences } from \"./views/Preferences\";\r\n\r\ninterface IProps {\r\n    seed: INewExperience[];\r\n    storage: IStorage;\r\n    tags: string[];\r\n}\r\n\r\nconst App: React.FunctionComponent<IProps> = (props: IProps) => {\r\n    const experiences = props.storage.get();\r\n    if (experiences.length === 0) {\r\n        props.storage.add_many(props.seed);\r\n    }\r\n    const [nav, setNav] = useState(\"\");\r\n\r\n    function handleNavigation(component: string): void {\r\n        setNav(component);\r\n    }\r\n\r\n    if (nav === \"Preferences\") {\r\n        return (\r\n            <Preferences\r\n                storage={props.storage}\r\n                onNavigation={handleNavigation}\r\n            />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Home\r\n            experiences={props.storage.get()}\r\n            onNavigation={handleNavigation}\r\n            tags={props.tags}\r\n        />\r\n    );\r\n};\r\n\r\nApp.defaultProps = {\r\n    seed: [],\r\n    tags: [],\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { LocalStorage } from \"./localStorage\";\r\n//import * as data from \"./seed.json\";\r\n\r\nimport seed from \"./seed.json\";\r\n\r\nconst experiences: INewExperience[] = [\r\n    { name: \"Eat apple 🍏\", last: new Date(2018, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat avocado 🥑\", last: new Date(2016, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat banana 🍌\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat broccoli 🥦\", tag: \"vegetable\" },\r\n    { name: \"Eat carrot 🥕\", tag: \"vegetable\" },\r\n    { name: \"Eat cherries 🍒\", last: new Date(2017, 5, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat chili 🌶️\", tag: \"fruit\" },\r\n    { name: \"Eat cucumber 🥒\", last: new Date(2017, 6, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat corn 🌽\", last: new Date(2017, 6, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat coconut 🥥\", last: new Date(2017, 7, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat eggplant 🍆\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat garlic 🧄\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat grapes 🍇\", last: new Date(2017, 9, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat leafy green 🥬\", tag: \"fruit\" },\r\n    { name: \"Eat lemon 🍋\", tag: \"fruit\" },\r\n    { name: \"Eat kiwi 🥝\", last: new Date(2017, 10, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat mango 🥭\", last: new Date(2017, 11, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat melon 🍈\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat mushroom 🍄\", last: new Date(2017, 4, 3).getTime() },\r\n    { name: \"Eat onion 🧅\", last: new Date(2017, 8, 3).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat orange 🍊\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat peach 🍑\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat peanuts 🥜\", tag: \"fruit\" },\r\n    { name: \"Eat pear 🍐\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat pineapple 🍍\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat potato 🥔\", last: new Date(2018, 10, 1).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat tomato 🍅\", last: new Date(2018, 10, 1).getTime(), tag: \"vegetable\" },\r\n    { name: \"Eat strawberry 🍓\", last: new Date(2018, 10, 1).getTime(), tag: \"fruit\" },\r\n    { name: \"Eat watermelon 🍉\", last: new Date(2017, 4, 3).getTime(), tag: \"fruit\" },\r\n    { name: \"Get a massage 💆‍♂️💆‍♀️\", tag: \"activity\" },\r\n    { name: \"Bake a applepie 🥧🍪\", last: new Date(2018, 7, 13).getTime() },\r\n    { name: \"Basketball 🏀\", tag: \"activity\" },\r\n    { name: \"Bike 🚴\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Bowling 🎳\", last: null, tag: \"activity\" },\r\n    { name: \"Box 🥊\", last: null, tag: \"activity\" },\r\n    { name: \"Climb 🧗\", last: null, tag: \"activity\" },\r\n    { name: \"Cold shower 🥶🚿\", tag: \"activity\" },\r\n    { name: \"Dance 💃🕺\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Fasting 🍽\" },\r\n    { name: \"Football ⚽\", tag: \"activity\" },\r\n    { name: \"Guitar 🎸\", last: null, tag: \"activity\" },\r\n    { name: \"Ice bath 🥶🛀\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Ice skate ⛸️\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Meditate 🧘‍\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Read 📖\", last: new Date(2019, 0, 13).getTime(), tag: \"activity\" },\r\n    { name: \"Run 🏃\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Paint 🎨\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Play chess ♟️\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Play pool 🎱\", last: null, tag: \"activity\" },\r\n    { name: \"Sauna 🧖‍♂️🧖‍♀️\", tag: \"activity\" },\r\n    { name: \"Ski 🎿\", tag: \"activity\" },\r\n    { name: \"Swim 🏊\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Theatre 🎭\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Yoga 🧘\", last: new Date(2019, 0, 11).getTime(), tag: \"activity\" },\r\n    { name: \"Watch a movie 🎬\", last: null, tag: \"activity\" },\r\n    { name: \"Volleyball 🏐\", last: null, tag: \"activity\" },\r\n    { name: \"Wrestle 🤼\", last: null, tag: \"activity\" },\r\n    { name: \"Cook pasta 🍝\", last: null },\r\n    { name: \"Beach 🏖\", last: null, tag: \"places\" },\r\n    { name: \"Botanical garden 🌿\", last: null, tag: \"places\" },\r\n    { name: \"Cemetery ⚱️\", last: null, tag: \"places\" },\r\n    { name: \"Museum 🖼\", last: null, tag: \"places\" },\r\n    { name: \"Park 🏞\", last: null, tag: \"places\" },\r\n];\r\n\r\nconst storage: IStorage = new LocalStorage();\r\nconst tags: string[] = [\"Activity\", \"Fruit\", \"Places\", \"Vegetable\"];\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App seed={experiences} storage={storage} tags={tags} />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n","import { v4 as uuid } from \"uuid\";\r\nimport { IStorage, INewExperience } from \"./IStorage\";\r\nimport { IExperience } from \"./IExperience\";\r\n\r\nexport class LocalStorage implements IStorage {\r\n    public add(experience: INewExperience): void {\r\n        const experiences = this.get();\r\n        const item: IExperience = {\r\n            id: uuid(),\r\n            last: experience.last,\r\n            name: experience.name,\r\n            tag: experience.tag,\r\n        };\r\n        experiences.push(item);\r\n        localStorage.setItem(\"experiences\", JSON.stringify(experiences));\r\n    }\r\n\r\n    public add_many(experiences: INewExperience[]): void {\r\n        const data = this.get();\r\n        for (const experience of experiences) {\r\n            const item: IExperience = {\r\n                id: uuid(),\r\n                last: experience.last,\r\n                name: experience.name,\r\n                tag: experience.tag,\r\n            };\r\n            data.push(item);\r\n        }\r\n        localStorage.setItem(\"experiences\", JSON.stringify(data));\r\n    }\r\n\r\n    public delete(id: string): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public get(): IExperience[] {\r\n        const experiences = localStorage.getItem(\"experiences\");\r\n        if (experiences === null) {\r\n            return [];\r\n        }\r\n        return JSON.parse(experiences);\r\n    }\r\n\r\n    public update(experience: IExperience): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\r\n"],"sourceRoot":""}